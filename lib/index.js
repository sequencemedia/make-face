"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.readFaceFromCMD=exports.readFace=exports.makeFaceFromCMD=exports.makeFace=void 0;var _fsExtra=_interopRequireDefault(require("fs-extra"));var _path=_interopRequireDefault(require("path"));var _mime=_interopRequireDefault(require("mime"));var _globAll=_interopRequireDefault(require("glob-all"));var _sacredFs=require("sacred-fs");var log=_interopRequireWildcard(require("./log"));var _constants=_interopRequireDefault(require("./constants"));function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const SRC_PATH_PATTERN=`**/?(${_constants.default.formats.sort().map(format=>`*.${format}`).join('|')})`;const ensureFile=filePath=>new Promise((resolve,reject)=>{_fsExtra.default.ensureFile(filePath,e=>!e?resolve():reject(e));});const mapFilePathListFromFS=filePathList=>Promise.all(filePathList.map(filePath=>(0,_sacredFs.readFile)(filePath).then(fileData=>({filePath,fileData}))));const mapFilePathListToFS=filePathList=>Promise.all(filePathList.map(({filePath,fileData})=>ensureFile(filePath).then(()=>(0,_sacredFs.writeFile)(filePath,fileData)).then(()=>filePathList)));const getStatError=(e,p)=>e.code==='ENOENT'?`Path '${p}' does not exist.`:p?`An error occurred on path ${p}: ${e.message}`:'Path is not defined.';function srcStat(p){const{SRC_PATH}=p;return(0,_sacredFs.stat)(SRC_PATH).then(()=>p).catch(e=>{throw new Error(getStatError(e,SRC_PATH));});}function cssStat(p){const{CSS_PATH}=p;return(0,_sacredFs.stat)(CSS_PATH).then(()=>p).catch(e=>{throw new Error(getStatError(e,CSS_PATH));});}function getFilePathList(filePath){return new Promise((resolve,reject)=>{(0,_globAll.default)(filePath,(e,filePathList)=>!e?resolve(filePathList):reject(e));});}const mapSrcFilePathToCSSFilePath=(filePath,srcPath,cssPath)=>filePath.replace(srcPath,cssPath);const getFileNameFromFilePath=filePath=>_path.default.basename(filePath,_path.default.extname(filePath));const getFontMimeType=filePath=>_mime.default.lookup(filePath);function getFontFormat(filePath){const extension=_path.default.extname(filePath).slice(1).toLowerCase();switch(extension){case'ttf':return'truetype';case'otf':return'opentype';case'eot':return'embedded-opentype';default:return extension;}}const url=(filePath,fileData)=>`url(data:${getFontMimeType(filePath)};base64,${fileData.toString('base64')}) format('${getFontFormat(filePath)}')`;const createCSSFilePath=filePath=>`${_path.default.join(_path.default.dirname(filePath),getFileNameFromFilePath(filePath))}.css`;const createCSSFileData=(fileName,list)=>`
@font-face {
  font-family: '${fileName}';
  src: ${list.map(({filePath,fileData})=>url(filePath,fileData)).join(', ')};
}
`;function createCSSFilePathListFromSrcFilePathList(srcFilePathList,srcPath,cssPath){const cssFilePathList=[];while(srcFilePathList.length){const srcFile=srcFilePathList.shift();const{filePath:srcFilePath}=srcFile;const fileName=getFileNameFromFilePath(srcFilePath);const filePath=_path.default.join(_path.default.dirname(srcFilePath),fileName);const list=srcFilePathList.filter(({filePath:f})=>filePath===_path.default.join(_path.default.dirname(f),getFileNameFromFilePath(f)));list.forEach(({filePath})=>srcFilePathList.splice(srcFilePathList.findIndex(({filePath:f})=>filePath===f),1));const last=[srcFile].concat(list);const cssFilePath=createCSSFilePath(mapSrcFilePathToCSSFilePath(srcFilePath,srcPath,cssPath));const cssFileData=createCSSFileData(fileName,last);const cssFile={filePath:cssFilePath,fileData:cssFileData};cssFilePathList.push(cssFile);}return cssFilePathList;}const makeFace=(SRC_PATH,CSS_PATH)=>Promise.resolve({SRC_PATH,CSS_PATH}).then(srcStat).then(cssStat).then(()=>_path.default.join(SRC_PATH,SRC_PATH_PATTERN)).then(getFilePathList).then(mapFilePathListFromFS).then(filePathList=>createCSSFilePathListFromSrcFilePathList(filePathList,SRC_PATH,CSS_PATH)).then(mapFilePathListToFS).catch(({message})=>{log.decorateError(message);});exports.makeFace=makeFace;const makeFaceFromCMD=(SILENT,SRC_PATH,CSS_PATH)=>SILENT?makeFace(SRC_PATH,CSS_PATH):Promise.resolve({SRC_PATH,CSS_PATH}).then(srcStat).then(cssStat).then(()=>{log.decorateSrcPath(SRC_PATH);log.decorateCSSPath(CSS_PATH);}).then(()=>_path.default.join(SRC_PATH,SRC_PATH_PATTERN)).then(getFilePathList).then(filePathList=>{log.decorateSrcFilePathList(filePathList);return filePathList;}).then(mapFilePathListFromFS).then(filePathList=>createCSSFilePathListFromSrcFilePathList(filePathList,SRC_PATH,CSS_PATH)).then(filePathList=>{log.decorateCSSFilePathList(filePathList);return filePathList;}).then(mapFilePathListToFS).catch(({message})=>{log.decorateError(message);});exports.makeFaceFromCMD=makeFaceFromCMD;const readFace=PATH=>Promise.resolve({PATH}).then(p=>{const{PATH}=p;return(0,_sacredFs.stat)(PATH).then(()=>p).catch(e=>{throw new Error(getStatError(e,PATH));});}).then(({PATH})=>_path.default.join(PATH,'**/*.css')).then(getFilePathList).then(mapFilePathListFromFS).then(transformFilePathList).catch(({message})=>{log.decorateError(message);});exports.readFace=readFace;const transformFilePathList=filePathList=>filePathList.reduce((accumulator,{filePath,fileData})=>({...accumulator,[filePath]:fileData.toString('utf8')}),{});const createFileLine=(filePath,fileData)=>`
/**
 * \`${filePath}\`
 */
${fileData.replace(/^\n+|\n+$/g,'')}
`;const transformToFile=data=>Object.entries(data).reduce((accumulator,[filePath,fileData])=>accumulator.concat(createFileLine(filePath,fileData)),'');const readFaceFromCMD=(SILENT,PATH,FILE)=>SILENT?readFace(PATH).then(data=>ensureFile(FILE).then(()=>(0,_sacredFs.writeFile)(FILE,transformToFile(data))).then(()=>data)):Promise.resolve({PATH}).then(p=>{const{PATH}=p;return(0,_sacredFs.stat)(PATH).then(()=>p).catch(e=>{throw new Error(getStatError(e,PATH));});}).then(({PATH})=>_path.default.join(PATH,'**/*.css')).then(getFilePathList).then(filePathList=>{log.decorateFilePathList(filePathList);return filePathList;}).then(mapFilePathListFromFS).then(transformFilePathList).then(data=>ensureFile(FILE).then(()=>(0,_sacredFs.writeFile)(FILE,transformToFile(data))).then(()=>data)).then(data=>{log.decorateFile(FILE);return data;}).catch(({message})=>{log.decorateError(message);});exports.readFaceFromCMD=readFaceFromCMD;