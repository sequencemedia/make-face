"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.makeFace=makeFace;exports.readFace=readFace;var _debug=_interopRequireDefault(require("debug"));var _fsExtra=_interopRequireDefault(require("fs-extra"));var _path=_interopRequireDefault(require("path"));var _mime=_interopRequireDefault(require("mime"));var _globAll=_interopRequireDefault(require("glob-all"));var _sacredFs=require("sacred-fs");var _constants=_interopRequireDefault(require("./constants"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const log=(0,_debug.default)('@sequencemedia/make-face');const SRC_GLOB=`**/?(${_constants.default.formats.sort().map(format=>`*.${format}`).join('|')})`;const CSS_GLOB='**/*.css';const ensureFile=filePath=>new Promise((resolve,reject)=>{_fsExtra.default.ensureFile(filePath,e=>!e?resolve():reject(e));});async function readFileFromFS(filePath){await ensureFile(filePath);return(0,_sacredFs.readFile)(filePath);}async function writeFileToFS(filePath,fileData){await ensureFile(filePath);return(0,_sacredFs.writeFile)(filePath,fileData);}async function mapFilePathFromFS(filePath){const fileData=await readFileFromFS(filePath);return{filePath,fileData};}async function mapFilePathToFS(filePath,fileData){await writeFileToFS(filePath,fileData);return{filePath,fileData};}function mapFilePathListFromFS(filePathList){return Promise.all(filePathList.map(mapFilePathFromFS));}function mapFileDataListToFS(filePathList){return Promise.all(filePathList.map(({filePath,fileData})=>mapFilePathToFS(filePath,fileData)));}const getStatError=(e,p)=>e.code==='ENOENT'?`Path "${p}" does not exist.`:p?`An error occurred on path "${p}": ${e.message}`:'Path is not defined.';async function statPath(directory){try{await(0,_sacredFs.stat)(directory);}catch(e){throw new Error(getStatError(e,directory));}}const getFileNameFromFilePath=filePath=>_path.default.basename(filePath,_path.default.extname(filePath));const getSrcFileGlob=directory=>_path.default.join(directory,SRC_GLOB);const getCSSFileGlob=directory=>_path.default.join(directory,CSS_GLOB);const getCSSFilePath=directory=>_path.default.join(_path.default.dirname(directory),getFileNameFromFilePath(directory));function getFilePathList(filePath){return new Promise((resolve,reject)=>{(0,_globAll.default)(filePath,(e,filePathList)=>!e?resolve(filePathList):reject(e));});}const transformSrcFilePathToCSSFilePath=(filePath,srcPath,cssPath)=>filePath.replace(new RegExp(_path.default.extname(filePath).concat('$')),'.css').replace(new RegExp('^'.concat(srcPath)),cssPath);const getFontMimeType=filePath=>_mime.default.getType(filePath);function getSrcFilePathList(directory){return getFilePathList(getSrcFileGlob(directory));}function createSrcFilePathList(directory){return getFilePathList(getCSSFileGlob(directory));}function getFontFormat(filePath){const extension=_path.default.extname(filePath).slice(1).toLowerCase();switch(extension){case'ttf':return'truetype';case'otf':return'opentype';case'eot':return'embedded-opentype';default:return extension;}}const transformToUrl=(filePath,fileData)=>`url(data:${getFontMimeType(filePath)};base64,${fileData.toString('base64')}) format('${getFontFormat(filePath)}')`;const createCSSFileDataLine=(filePath,fileData)=>`
/**
 *  "${filePath}"
 */
${fileData.replace(/^.*\/\*\*.*\n(?: \* +".*"\n)+ \*\/\n/gm,'').replace(/^\n+|\n+$/g,'')}
`;const createCSSFileDataFromCSSFilePathList=fileDataList=>{const[{filePath}]=fileDataList;return`/**
${fileDataList.map(({filePath})=>` *  "${filePath}"`).join('\n')}
 */
@font-face {
  font-family: '${getFileNameFromFilePath(filePath)}';
  src: ${fileDataList.map(({filePath,fileData})=>transformToUrl(filePath,fileData)).join(', ')};
}
`;};const createCSSFileDataFromCSSFileDataList=fileDataList=>fileDataList.reduce((accumulator,{filePath,fileData})=>accumulator.concat(createCSSFileDataLine(filePath,fileData.toString('utf8'))),'');function createCSSFilePathListFromSrcFilePathList(srcFilePathList,srcPath,cssPath){const cssFileDataList=[];while(srcFilePathList.length){const srcFile=srcFilePathList.shift();const{filePath:srcFilePath}=srcFile;const filePath=getCSSFilePath(srcFilePath);const cssFilePathList=srcFilePathList.filter(({filePath:f})=>filePath===getCSSFilePath(f));cssFilePathList.forEach(({filePath})=>srcFilePathList.splice(srcFilePathList.findIndex(({filePath:f})=>filePath===f),1));cssFilePathList.unshift(srcFile);const cssFilePath=transformSrcFilePathToCSSFilePath(srcFilePath,srcPath,cssPath);const cssFileData=createCSSFileDataFromCSSFilePathList(cssFilePathList);const cssFile={filePath:cssFilePath,fileData:cssFileData};cssFileDataList.push(cssFile);}return cssFileDataList;}async function makeFace(origin,destination){try{await statPath(origin);await statPath(destination);log(`Reading faces from "${origin}"`);const srcFileDataList=await mapFilePathListFromFS(await getSrcFilePathList(origin));const cssFileDataList=await createCSSFilePathListFromSrcFilePathList(srcFileDataList,origin,destination);log(`Writing faces to "${destination}"`);await mapFileDataListToFS(cssFileDataList);log('Done.');return cssFileDataList.map(({fileData})=>fileData);}catch({message}){log(message);}}async function readFace(origin,destination){try{await statPath(origin);log(`Reading faces from "${origin}"`);const cssFileDataList=await mapFilePathListFromFS(await createSrcFilePathList(origin));const cssFileData=createCSSFileDataFromCSSFileDataList(cssFileDataList);log(`Writing faces to "${destination}"`);await writeFileToFS(destination,cssFileData);log('Done.');return cssFileData;}catch({message}){log(message);}}