"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.makeFace=makeFace;exports.readFace=readFace;var _debug=_interopRequireDefault(require("debug"));var _fsExtra=_interopRequireDefault(require("fs-extra"));var _path=_interopRequireDefault(require("path"));var _mime=_interopRequireDefault(require("mime"));var _globAll=_interopRequireDefault(require("glob-all"));var _promises=require("fs/promises");var _constants=_interopRequireDefault(require("./constants"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const log=(0,_debug.default)('@sequencemedia/make-face');const SRC_GLOB=`**/?(${_constants.default.sort().map(format=>'*.'.concat(format)).join('|')})`;const CSS_GLOB='**/*.css';const ensureFile=filePath=>new Promise((resolve,reject)=>{_fsExtra.default.ensureFile(filePath,e=>!e?resolve():reject(e));});const getStatError=(e,p)=>e.code==='ENOENT'?`Path "${p}" does not exist.`:p?`An error occurred on path "${p}": ${e.message}`:'Path is not defined.';async function readFileFromFS(filePath){await ensureFile(filePath);return(0,_promises.readFile)(filePath);}async function writeFileToFS(filePath,fileData){await ensureFile(filePath);return(0,_promises.writeFile)(filePath,fileData);}function writeFileDataToFS({filePath,fileData}){return writeFileToFS(filePath,fileData);}function writeFileDataListToFS(fileDataList){return Promise.all(fileDataList.map(writeFileDataToFS));}async function readFileDataFromFS(filePath){const fileData=await readFileFromFS(filePath);return{filePath,fileData};}function readFileDataListFromFS(filePathList){return Promise.all(filePathList.map(readFileDataFromFS));}async function statPath(directory){try{await(0,_promises.stat)(directory);}catch(e){throw new Error(getStatError(e,directory));}}const getSrcFileGlob=directory=>_path.default.join(directory,SRC_GLOB);const getCSSFileGlob=directory=>_path.default.join(directory,CSS_GLOB);function getFilePathList(filePath){return new Promise((resolve,reject)=>{(0,_globAll.default)(filePath,(e,filePathList)=>!e?resolve(filePathList):reject(e));});}function getSrcFilePathList(directory){return getFilePathList(getSrcFileGlob(directory));}function getCSSFilePathList(directory){return getFilePathList(getCSSFileGlob(directory));}function findCSSFilePathFactory(cssFilePath,srcPath,cssPath){return function findCSSFilePath({filePath}){return cssFilePath===getCSSFilePathFromSrcFilePath(filePath,srcPath,cssPath);};}const getFontMimeType=filePath=>_mime.default.getType(filePath);function getFontFormat(filePath){const extension=_path.default.extname(filePath).slice(1).toLowerCase();switch(extension){case'ttf':return'truetype';case'otf':return'opentype';case'eot':return'embedded-opentype';default:return extension;}}function getCSSFilePathFromSrcFilePath(filePath,srcPath,cssPath){const extName=_path.default.extname(filePath);return filePath.replace(new RegExp(extName.concat('$')),'.css').replace(new RegExp('^'.concat(srcPath)),cssPath);}const transformToFontFamily=filePath=>_path.default.basename(filePath,_path.default.extname(filePath));const transformToUrl=(filePath,fileData)=>`url(data:${getFontMimeType(filePath)};base64,${fileData.toString('base64')}) format('${getFontFormat(filePath)}')`;const transformToSrc=filePathList=>filePathList.map(({filePath,fileData})=>transformToUrl(filePath,fileData)).join(', ');const transformCSSFileDataListLine=(filePath,fileData)=>{return`
/**
 *  "${filePath}"
 */
${fileData.toString('utf8').replace(/^.*\/\*\*.*\n(?: \* +".*"\n)+ \*\/\n/gm,'').replace(/^\n+|\n+$/g,'')}
`;};const transformCSSFilePathList=filePathList=>{const[{filePath}]=filePathList;return`/**
${filePathList.map(({filePath})=>` *  "${filePath}"`).join('\n')}
 */
@font-face {
  font-family: '${transformToFontFamily(filePath)}';
  src: ${transformToSrc(filePathList)};
}
`;};const transformCSSFileDataList=fileDataList=>{return fileDataList.reduce((accumulator,{filePath,fileData})=>accumulator.concat(transformCSSFileDataListLine(filePath,fileData)),'');};const createCSSFileDataFromCSSFilePathList=filePathList=>Buffer.from(transformCSSFilePathList(filePathList));const createCSSFileDataFromCSSFileDataList=fileDataList=>Buffer.from(transformCSSFileDataList(fileDataList));function transformToCSSFileDataFromCSSFileDataList(cssFileDataList,cssFilePath){const cssFileData=createCSSFileDataFromCSSFileDataList(cssFileDataList);return{filePath:cssFilePath,fileData:cssFileData};}function transformToCSSFileDataListFromSrcFilePathList(srcFilePathList,srcPath,cssPath){return srcFilePathList.reduce((accumulator,{filePath:srcFilePath})=>{const cssFilePath=getCSSFilePathFromSrcFilePath(srcFilePath,srcPath,cssPath);const findCSSFilePath=findCSSFilePathFactory(cssFilePath,srcPath,cssPath);if(accumulator.some(findCSSFilePath))return accumulator;const cssFilePathList=srcFilePathList.filter(findCSSFilePath);const cssFileData=createCSSFileDataFromCSSFilePathList(cssFilePathList);return accumulator.concat({filePath:cssFilePath,fileData:cssFileData});},[]);}async function makeFace(origin,destination){log('Starting ...');try{await statPath(origin);await statPath(destination);log(`Reading faces from "${origin}"`);const srcFileDataList=await readFileDataListFromFS(await getSrcFilePathList(origin));const cssFileDataList=transformToCSSFileDataListFromSrcFilePathList(srcFileDataList,origin,destination);log(`Writing faces to "${destination}"`);await writeFileDataListToFS(cssFileDataList);log('Done.');return cssFileDataList;}catch({message}){log(message);}}async function readFace(origin,destination){log('Starting ...');try{await statPath(origin);log(`Reading faces from "${origin}"`);const cssFileDataList=await readFileDataListFromFS(await getCSSFilePathList(origin));const cssFileData=transformToCSSFileDataFromCSSFileDataList(cssFileDataList,destination);log(`Writing faces to "${destination}"`);await writeFileDataToFS(cssFileData);log('Done.');return cssFileData;}catch({message}){log(message);}}